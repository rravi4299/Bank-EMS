-- KNEX_FILE_CODE

    require('dotenv').config()
    module.exports = {
    development: {
        client: 'pg',
        connection: "postgres://postgres:Jasvin@1993@localhost:5432/meet_here",
        migrations: {
        directory: '.src/appDB/migrations/',
        },
        seeds: {
        directory: '.src/appDB/seeds/',
        },
    },
    };



-- DATABASE_CONNECTION

    const knex = require('knex');
    const knexConfig = require('../../knexfile');

    const db = knex(knexConfig.development);
    module.exports = db;



-- KNEX_USERS_MIGRATION_CODE

    exports.up = function (knex) {
    return knex.schema.createTable("users", function (table) {
        table.increments("id").primary();
        table.string("username").notNullable().unique();
        table.string("email").notNullable().unique();
        table.string("password").notNullable();
        table.timestamps(true, true); // Creates "created_at" and "updated_at" columns
    });
    };

    exports.down = function (knex) {
    return knex.schema.dropTable("users");
    };


-- KNEX_POSTS_MIGRATION_CODE

    exports.up = function (knex) {
    return knex.schema.createTable("posts", function (table) {
        table.increments("id").primary();
        table.integer("user_id").unsigned().notNullable();
        table.string("title").notNullable();
        table.text("content").notNullable();
        table.timestamps(true, true); // Creates "created_at" and "updated_at" columns

        table
        .foreign("user_id")
        .references("id")
        .inTable("users")
        .onDelete("CASCADE");
    });
    };

    exports.down = function (knex) {
    return knex.schema.dropTable("posts");
    };


-- USERS_JSON_DATA

    [
        {
            "username":"xwolvi345",
            "email":"xwolvi@gmail.com",
            "password":"X@123"
        },
        {
            "username":"ravi9980",
            "email":"ravi99@gmail.com",
            "password":"rrr@123"
        },
        {
            "username":"kamlesh99987",
            "email":"kamlesh@gmail.com",
            "password":"X@123"
        }

    ]

    

-- POSTS_JSON_DATA

    [
        {
            "content": "I am one of the biggest fool on this earth",
            "title": "me",
            "user_id": 14
        },
        {
            "content": "Yes, user 1 is no one fool on this earth",
            "title": "user 1",
            "user_id": 15
        },
        {
            "content": "I am the better person here",
            "title": "anonymous",
            "user_id": 14
        }
    ]


-- USERS_SEED_CODE


    const userData = require('../../data/userData.json');

    exports.seed = async function (knex) {
    // Deletes ALL existing entries and resets the primary key sequence
    await knex("users").del();
        // Inserts seed entries
        return await knex("users").insert(userData);
    };


-- POSTS_SEED_CODE

    const postData = require('../../data/postData.json');
    exports.seed = async function (knex) {
    // Deletes ALL existing entries and resets the primary key sequence
    await knex("posts").del();
        // Inserts seed entries
        return await knex("posts").insert(postData);
    };



-- USERS_MODEL_CODE


    const knex = require('../config/db_config'); // Import your Knex database connection

    // Create a new user
    async function createUser(user) {
    try {
        const [newUserId] = await knex('users').insert(user);
        return newUserId;
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error creating user: ' + error.message);
    }
    }

    // Find a user by username or email
    async function findByUsernameOrEmail(usernameOrEmail) {
    try {
        const user = await knex('users')
        .where('username', usernameOrEmail)
        .orWhere('email', usernameOrEmail)
        .first();

        return user || null; // User not found returns null
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error finding user: ' + error.message);
    }
    }

    // Find a user by ID
    async function findById(id) {
    try {
        const user = await knex('users').where('id', id).first();

        return user || null; // User not found returns null
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error finding user by ID: ' + error.message);
    }
    }

    // Update a user's password
    async function updatePassword(userId, newPassword) {
    try {
        await knex('users')
        .where('id', userId)
        .update({ password: newPassword });

        return true; // Password updated successfully
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error updating user password: ' + error.message);
    }
    }

    // Delete a user by username
    async function deleteUser(username) {
    try {
        await knex('users').where({ username }).del();
        return true; // User deleted successfully
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error deleting user: ' + error.message);
    }
    }

    module.exports = {
    createUser,
    findByUsernameOrEmail,
    findById,
    updatePassword,
    deleteUser,
    };


-- POSTS_MODEL_CODE


    const knex = require('../config/db_config'); // Import your Knex database connection

    // Create a new post
    async function createPost(post) {
    try {
        const [newPostId] = await knex('posts').insert(post);
        return newPostId;
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error creating post: ' + error.message);
    }
    }

    // Find a post by ID
    async function findPostById(id) {
    try {
        const post = await knex('posts').where('id', id).first();

        return post || null; // Post not found returns null
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error finding post by ID: ' + error.message);
    }
    }

    // Update a post's title and content
    async function updatePost(postId, { title, content }) {
    try {
        await knex('posts')
        .where('id', postId)
        .update({ title, content });

        return true; // Post updated successfully
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error updating post: ' + error.message);
    }
    }

    // Delete a post by ID
    async function deletePost(postId) {
    try {
        await knex('posts').where({ id: postId }).del();
        return true; // Post deleted successfully
    } catch (error) {
        // Handle the error (e.g., log it or throw a custom error)
        throw new Error('Error deleting post: ' + error.message);
    }
    }

    module.exports = {
    createPost,
    findPostById,
    updatePost,
    deletePost,
    };


-- AUTH_CONTROLLER_CODE

    const bcrypt = require('bcrypt');
    const jwt = require('jsonwebtoken');
    const dotenv = require('dotenv');
    dotenv.config();

    const User = require('../models/user'); // Import the User model
    const { validationResult } = require('express-validator');

    // Register a new user
    async function registerUser(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        // Check if the user with the same username or email already exists
        const { username, email, password } = req.body;

        const existingUser = await User.findByUsernameOrEmail(username || email);

        if (existingUser) {
        return res.status(400).json({ message: 'User with the same username or email already exists' });
        }

        // Hash the password
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // Create a new user record
        const newUser = await User.createUser({
        username,
        email,
        password: hashedPassword,
        });

        return res.status(201).json({ message: 'User registered successfully', user: newUser });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Log in a user
    async function loginUser(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        // Check if the user exists
        const { usernameOrEmail, password } = req.body;

        const user = await User.findByUsernameOrEmail(usernameOrEmail);

        if (!user) {
        return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Verify the password
        const passwordMatch = await bcrypt.compare(password, user.password);

        if (!passwordMatch) {
        return res.status(401).json({ message: 'Invalid credentials' });
        }

        // Generate a JWT token for the user
        const token = jwt.sign({ userId: user.id, username: user.username }, process.env.JWT_SECRET, {
        expiresIn: '1h', // Token expires in 1 hour (adjust as needed)
        });

        return res.status(200).json({ message: 'Login successful', token });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    module.exports = {
    registerUser,
    loginUser,
    };

-- POST_CONTROLLER_CODE

    const Post = require('../models/post'); // Import the Post model
    const { validationResult } = require('express-validator');

    // Create a new post
    async function createPost(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        const { userId, title, content } = req.body;

        // Create a new post record
        const newPostId = await Post.createPost({
        userId,
        title,
        content,
        });

        return res.status(201).json({ message: 'Post created successfully', postId: newPostId });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Get a post by ID
    async function getPostById(req, res) {
    try {
        const postId = req.params.id;

        // Find the post by ID
        const post = await Post.findPostById(postId);

        if (!post) {
        return res.status(404).json({ message: 'Post not found' });
        }

        return res.status(200).json({ post });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Update a post
    async function updatePost(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        const postId = req.params.id;
        const { title, content } = req.body;

        // Update the post
        const updated = await Post.updatePost(postId, { title, content });

        if (!updated) {
        return res.status(404).json({ message: 'Post not found' });
        }

        return res.status(200).json({ message: 'Post updated successfully' });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Delete a post
    async function deletePost(req, res) {
    try {
        const postId = req.params.id;

        // Delete the post
        const deleted = await Post.deletePost(postId);

        if (!deleted) {
        return res.status(404).json({ message: 'Post not found' });
        }

        return res.status(200).json({ message: 'Post deleted successfully' });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    module.exports = {
    createPost,
    getPostById,
    updatePost,
    deletePost,
    };

-- USER_CONTROLLER_CODE

    const User = require('../models/user'); // Import the User model
    const { validationResult } = require('express-validator');

    // Create a new user
    async function createUser(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        const { username, email, password } = req.body;

        // Check if the user with the same username or email already exists
        const existingUser = await User.findByUsernameOrEmail(username || email);

        if (existingUser) {
        return res.status(400).json({ message: 'User with the same username or email already exists' });
        }

        // Create a new user record
        const newUser = await User.createUser({
        username,
        email,
        password,
        });

        return res.status(201).json({ message: 'User registered successfully', user: newUser });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Get user by ID
    async function getUserById(req, res) {
    try {
        const userId = req.params.id;

        // Find the user by ID
        const user = await User.findById(userId);

        if (!user) {
        return res.status(404).json({ message: 'User not found' });
        }

        // Remove sensitive information like password before sending the response
        const { id, username, email } = user;

        return res.status(200).json({ user: { id, username, email } });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Update user's password
    async function updateUserPassword(req, res) {
    try {
        // Validate incoming request data
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
        }

        const userId = req.params.id;
        const { newPassword } = req.body;

        // Update the user's password
        const updatedUser = await User.updatePassword(userId, newPassword);

        if (!updatedUser) {
        return res.status(404).json({ message: 'User not found' });
        }

        return res.status(200).json({ message: 'User password updated successfully' });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    // Delete a user by ID
    async function deleteUser(req, res) {
    try {
        const userId = req.params.id;

        // Delete the user
        const deletedUser = await User.deleteUser(userId);

        if (!deletedUser) {
        return res.status(404).json({ message: 'User not found' });
        }

        return res.status(200).json({ message: 'User deleted successfully' });
    } catch (error) {
        console.error(error);
        return res.status(500).json({ message: 'Server error' });
    }
    }

    module.exports = {
    createUser,
    getUserById,
    updateUserPassword,
    deleteUser,
    };


-- AUTH_SERVICE_CODE


    const jwt = require('jsonwebtoken');
    const dotenv = require('dotenv');
    dotenv.config();

    // Secret key for JWT
    const JWT_SECRET = process.env.JWT_SECRET;

    // Generate a JWT token
    function generateToken(userId, username) {
    const payload = {
        userId,
        username,
    };

    const options = {
        expiresIn: '1h', // Token expires in 1 hour (adjust as needed)
    };

    return jwt.sign(payload, JWT_SECRET, options);
    }

    // Verify a JWT token
    function verifyToken(token) {
    try {
        const decoded = jwt.verify(token, JWT_SECRET);
        return decoded;
    } catch (error) {
        // Token is invalid or has expired
        return null;
    }
    }

    module.exports = {
    generateToken,
    verifyToken,
    };



-- EMAIL_SERVICE_CODE

    const mailer = require('nodemailer');

    // Create a transporter using Gmail SMTP
    const transporter = mailer.createTransport({
        service: 'Gmail',
        auth: {
        user: 'sjasvin9493@gmail.com',
        pass: 'gvmz eecg xezc uzsz',
        },
    });

    exports.emailSender = async (email) => {
        var mailOptions = {
            from: "sjasvin9493@gmail.com", // Sender's email address
            to: email, // Recipient's email address (the one just registered)
            subject: 'Welcome to VMA - Registration Confirmation',
            text: 'Thank you for registering with VMA. Your registration is successful!',
        };

        try{
            await transporter.sendMail(mailOptions);
            console.log("send successfully")
        }catch(error){
            console.log(error);
        }
    };


-- INDEX_ROUTE_CODE


    const express = require('express');
    const router = express.Router();

    // Include other route files
    const authRoute = require('./authRoute');
    const postRoute = require('./postRoute');
    const userRoute = require('./userRoute');

    // Define the home route
    router.get('/', (req, res) => {
    res.send('Welcome to the Home Page');
    });

    // Include the authentication routes
    router.use('/auth', authRoute);

    // Include the post-related routes
    router.use('/posts', postRoute);

    // Include the user-related routes
    router.use('/users', userRoute);

    module.exports = router;
    


-- AUTH_ROUTE_CODE


    const express = require('express');
    const router = express.Router();
    const { body } = require('express-validator');

    const authController = require('../controllers/authController');

    // Define registration route
    router.post(
    '/register',
    [
        // Add validation middleware here if needed
    ],
    authController.registerUser
    );

    // Define login route
    router.post(
    '/login',
    [
        // Add validation middleware here if needed
    ],
    authController.loginUser
    );

    module.exports = router;



-- USER_ROUTE_CODE


    const express = require('express');
    const router = express.Router();
    const { body } = require('express-validator');

    const userController = require('../controllers/userController');

    // Define create user route
    router.post(
    '/create',
    [
        // Add validation middleware here if needed
    ],
    userController.createUser
    );

    // Define get user by ID route
    router.get('/:id', userController.getUserById);

    // Define update user password route
    router.put('/:id/update-password', [
        // Add validation middleware here if needed
    ], userController.updateUserPassword);

    // Define delete user route
    router.delete('/:id', userController.deleteUser);

    module.exports = router;



-- POST_ROUTE_CODE


    const express = require('express');
    const router = express.Router();
    const { body } = require('express-validator');

    const postController = require('../controllers/postController');

    // Define create post route
    router.post(
    '/create',
    [
        // Add validation middleware here if needed
    ],
    postController.createPost
    );

    // Define get post by ID route
    router.get('/:id', postController.getPostById);

    // Define update post route
    router.put('/:id', [
        // Add validation middleware here if needed
    ], postController.updatePost);

    // Define delete post route
    router.delete('/:id', postController.deletePost);

    module.exports = router;






